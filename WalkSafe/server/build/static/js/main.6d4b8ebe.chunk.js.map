{"version":3,"sources":["components/NavBar/navbar.module.css","components/NavBar/index.jsx","components/Footer/index.jsx","components/Blank/index.jsx","App.jsx","registerServiceWorker.js","index.jsx","components/Footer/footer.module.css"],"names":["module","exports","NavBar","Fragment","className","styles","skipLink","href","Link","to","Footer","footer","title","description","footerlink","Blank","id","App","Switch","Route","exact","path","component","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","BrowserRouter","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,SAAW,2B,6NCKd,SAASC,IACtB,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAWC,IAAOC,UACrB,uBAAGC,KAAK,gBAAR,yBAEF,yBAAKH,UAAU,8EACb,kBAACI,EAAA,EAAD,CAAMJ,UAAU,eAAeK,GAAG,KAAlC,YAGA,yBAAKL,UAAU,cACb,kBAACI,EAAA,EAAD,CAAMJ,UAAU,2BAA2BK,GAAG,KAA9C,Y,oBCdK,SAASC,IACtB,OACE,4BAAQN,UAAWC,IAAOM,QACxB,yBAAKP,UAAU,mBACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAWC,IAAOO,OAAtB,YACA,uBAAGR,UAAWC,IAAOQ,aAArB,kEAIF,yBAAKT,UAAU,SACb,wBAAIA,UAAU,iBACZ,4BACE,uBAAGA,UAAWC,IAAOS,WAAYP,KAAK,KAAtC,iBAIF,4BACE,uBAAGH,UAAWC,IAAOS,WAAYP,KAAK,KAAtC,iBAIF,4BACE,uBAAGH,UAAWC,IAAOS,WAAYP,KAAK,KAAtC,sBCzBD,SAASQ,IACtB,OAAO,0BAAMC,GAAG,gB,ICoBHC,E,iLAZX,OACE,kBAAC,IAAMd,SAAP,KACE,kBAACD,EAAD,MACA,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAcP,KAExC,kBAACL,EAAD,W,GARUa,a,QCCZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,M,MC/DjEC,IAASC,OACL,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDSX,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,GAAN,sBAEN7B,EAwCX,SAAiCO,GAE/ByB,MAAMzB,GACHI,MAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBlC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEAzDAqB,CAAwBlC,GAHxBD,EAAgBC,OClBxBmC,I,kBCjBAlE,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,YAAc,4BAA4B,WAAa,8B","file":"static/js/main.6d4b8ebe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"skipLink\":\"navbar_skipLink__SHnCL\"};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./navbar.module.css\";\r\n\r\n//TODO Web Template Studio: Add a new link in the NavBar for your page here.\r\n// A skip link is included as an accessibility best practice. For more information visit https://www.w3.org/WAI/WCAG21/Techniques/general/G1.\r\nexport default function NavBar() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className={styles.skipLink}>\r\n        <a href=\"#mainContent\">Skip to Main Content</a>\r\n      </div>\r\n      <nav className=\"navbar navbar-expand-sm navbar-light border-bottom justify-content-between\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          WalkSafe\r\n        </Link>\r\n        <div className=\"navbar-nav\">\r\n          <Link className=\"nav-item nav-link active\" to=\"/\">\r\n            Blank\r\n          </Link>\r\n        </div>\r\n      </nav>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./footer.module.css\";\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <footer className={styles.footer}>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row justify-content-around\">\r\n          <div className=\"col-8 col-md-5\">\r\n            <h5 className={styles.title}>WalkSafe</h5>\r\n            <p className={styles.description}>\r\n              This is placeholder text. Your web app description goes here.\r\n            </p>\r\n          </div>\r\n          <div className=\"col-2\">\r\n            <ul className=\"list-unstyled\">\r\n              <li>\r\n                <a className={styles.footerlink} href=\"/\">\r\n                  Example Link\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a className={styles.footerlink} href=\"/\">\r\n                  Example Link\r\n                </a>\r\n              </li>\r\n              <li>\r\n                <a className={styles.footerlink} href=\"/\">\r\n                  Example Link\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Blank() {\r\n  return <main id=\"mainContent\" />;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nimport Blank from \"./components/Blank\";\r\n\r\n//TODO Web Template Studio: Add routes for your new pages here.\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path = \"/\" component = { Blank } />\r\n        </Switch>\r\n        <Footer />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n/**  \r\n * Be aware that the website will only update to the latest version on the 2nd page visit if it as already cached \r\n * Learn more about service workers in React: https://create-react-app.dev/docs/making-a-progressive-web-app\r\n */\r\nregisterServiceWorker();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__17NK2\",\"title\":\"footer_title__2dE8q\",\"description\":\"footer_description__26pVc\",\"footerlink\":\"footer_footerlink__2iHoV\"};"],"sourceRoot":""}